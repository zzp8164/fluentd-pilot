#!/bin/sh

set -e
cd $(dirname $0)

FLUENTD_CONFIG=/etc/fluentd/fluentd.conf

assert_not_empty(){
    arg=$1
    shift
    if [ -z "$arg" ]; then
        echo "$@"
        exit 1
    fi
}

mkdir -p /etc/fluentd
echo "@include conf.d/*.conf" >> $FLUENTD_CONFIG

es(){
assert_not_empty "$ELASTICSEARCH_HOST" "ELASTICSEARCH_HOST required"
assert_not_empty "$ELASTICSEARCH_PORT" "ELASTICSEARCH_PORT required"

cat >> $FLUENTD_CONFIG << EOF
<match docker.**>
@type elasticsearch
hosts $ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT
reconnect_on_error true
${ELASTICSEARCH_USER:+user ${ELASTICSEARCH_USER}}
${ELASTICSEARCH_PASSWORD:+password ${ELASTICSEARCH_PASSWORD}}
${ELASTICSEARCH_PATH:+path ${ELASTICSEARCH_PATH}}
${ELASTICSEARCH_SCHEME:+scheme ${ELASTICSEARCH_SCHEME}}
${ELASTICSEARCH_SSL_VERIFY:+ssl_verify ${ELASTICSEARCH_SSL_VERIFY}}
target_index_key @target
index_name _default_index
flush_interval 3
type_name fluentd
</match>
EOF
}

default(){
echo "use default output"
cat >> $FLUENTD_CONFIG << EOF
<match docker.**>
@type stdout
</match>
EOF
}

file(){
assert_not_empty "$FILE_PATH" "FILE_PATH required"
cat >> $FLUENTD_CONFIG << EOF
<match docker.**>
@type file
path $FILE_PATH
</match>
EOF
}

graylog(){
assert_not_empty "$GRAYLOG_HOST" "GRAYLOG_HOST required"
assert_not_empty "$GRAYLOG_PORT" "GRAYLOG_PORT required"
cat >> $FLUENTD_CONFIG << EOF
<match docker.**>
@type gelf
host $GRAYLOG_HOST
port $GRAYLOG_PORT
protocol ${GRAYLOG_PROTOCOL:-udp}
flush_interval 3s
</match>
EOF
}

aliyun_sls(){


if [ -f "/run/secrets/aliyun_access_key" ];then
ALIYUNSLS_ACCESS_KEY_ID=$(cat /run/secrets/aliyun_access_key | awk -F":" '{ print $1 }')
ALIYUNSLS_ACCESS_KEY_SECRET=$(cat /run/secrets/aliyun_access_key | awk -F":" '{ print $2 }')
fi
assert_not_empty "$ALIYUNSLS_PROJECT"         "ALIYUNSLS_PROJECT required"
assert_not_empty "$ALIYUNSLS_REGION_ENDPOINT" "ALIYUNSLS_REGION_ENDPOINT required"
assert_not_empty "$ALIYUNSLS_ACCESS_KEY_ID"   "ALIYUNSLS_ACCESS_KEY_ID required"
assert_not_empty "$ALIYUNSLS_ACCESS_KEY_SECRET"   "ALIYUNSLS_ACCESS_KEY_SECRET required"

cat >> $FLUENTD_CONFIG << EOF
<match docker.**>
@type aliyun_sls

project              $ALIYUNSLS_PROJECT
region_endpoint      $ALIYUNSLS_REGION_ENDPOINT
access_key_id        $ALIYUNSLS_ACCESS_KEY_ID
access_key_secret    $ALIYUNSLS_ACCESS_KEY_SECRET
ssl_verify           ${SSL_VERIFY:-false}
need_create_logstore ${ALIYUNSLS_NEED_CREATE_LOGSTORE:-false}
create_logstore_ttl  ${ALIYUNSLS_CREATE_LOGSTORE_TTL:-1}
create_logstore_shard_count ${ALIYUNSLS_CREATE_LOGSTORE_SHARD_COUNT:-2}

flush_interval 3s
</match>
EOF

}

case "$FLUENTD_OUTPUT" in
    elasticsearch)
        es;;
    graylog)
        graylog;;
    aliyun_sls)
        aliyun_sls;;
    file)
        file;;
    *)
        default
esac
